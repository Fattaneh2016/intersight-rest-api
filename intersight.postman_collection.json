{
	"info": {
		"_postman_id": "a5703c1f-15fd-4042-84bd-082eb19cc09b",
		"name": "Intersight",
		"description": "Cisco Intersight Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET Compute / PhysicalSummaries",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc287cff-79ed-41cb-bfd7-3cf7c029d444",
						"type": "text/javascript",
						"exec": [
							"if (responseBody.length > 0) {",
							"  var jsonData = JSON.parse(responseBody);",
							"  for (var i = 0; i < jsonData.Results.length; i++) {",
							"    var object = jsonData.Results[i];",
							"    console.log(",
							"        object.Dn,",
							"        \"AvailableMemory: \" + object.AvailableMemory,",
							"        \"NumCpus: \" + object.NumCpus);",
							"  }",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Signature {{httpsig}}"
					},
					{
						"key": "Digest",
						"value": "{{computed-digest}}"
					},
					{
						"key": "Date",
						"value": "{{current-date}}"
					}
				],
				"body": {},
				"url": {
					"raw": "https://intersight.com/api/v1/compute/PhysicalSummaries",
					"protocol": "https",
					"host": [
						"intersight",
						"com"
					],
					"path": [
						"api",
						"v1",
						"compute",
						"PhysicalSummaries"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET NTP Policies",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Signature {{httpsig}}"
					},
					{
						"key": "Digest",
						"value": "{{computed-digest}}"
					},
					{
						"key": "Date",
						"value": "{{current-date}}"
					}
				],
				"body": {},
				"url": {
					"raw": "https://intersight.com/api/v1/ntp/Policies",
					"protocol": "https",
					"host": [
						"intersight",
						"com"
					],
					"path": [
						"api",
						"v1",
						"ntp",
						"Policies"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST NTP Policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aafba98d-8f40-4a79-a566-a968fb13507e",
						"type": "text/javascript",
						"exec": [
							"var respJsonData = JSON.parse(responseBody)",
							"",
							"if (respJsonData.Moid) {",
							"  pm.globals.set(\"ntp-policy\", respJsonData.Moid)",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Signature {{httpsig}}"
					},
					{
						"key": "Digest",
						"value": "{{computed-digest}}"
					},
					{
						"key": "Date",
						"value": "{{current-date}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Enabled\":true,\n  \"Name\":\"ntp-policy\",\n  \"Description\":\"NTP Policy for ntp.org\",\n  \"NtpServers\":[\"pool.ntp.org\"],\n  \"Tags\":[]\n}"
				},
				"url": {
					"raw": "https://intersight.com/api/v1/ntp/Policies",
					"protocol": "https",
					"host": [
						"intersight",
						"com"
					],
					"path": [
						"api",
						"v1",
						"ntp",
						"Policies"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE NTP Policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "662374a2-8323-45fc-bd0e-241c4fcd53bc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Signature {{httpsig}}"
					},
					{
						"key": "Digest",
						"value": "{{computed-digest}}"
					},
					{
						"key": "Date",
						"value": "{{current-date}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"NtpServers\":[\"pool.ntp.org\", \"10.10.10.30\"]\n}"
				},
				"url": {
					"raw": "https://intersight.com/api/v1/ntp/Policies/{{ntp-policy}}",
					"protocol": "https",
					"host": [
						"intersight",
						"com"
					],
					"path": [
						"api",
						"v1",
						"ntp",
						"Policies",
						"{{ntp-policy}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE NTP Policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e022489-7373-4dec-b238-7b043ac3e008",
						"type": "text/javascript",
						"exec": [
							"pm.globals.unset(\"ntp-policy\");"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Signature {{httpsig}}"
					},
					{
						"key": "Digest",
						"value": "{{computed-digest}}"
					},
					{
						"key": "Date",
						"value": "{{current-date}}"
					}
				],
				"body": {},
				"url": {
					"raw": "https://intersight.com/api/v1/ntp/Policies/{{ntp-policy}}",
					"protocol": "https",
					"host": [
						"intersight",
						"com"
					],
					"path": [
						"api",
						"v1",
						"ntp",
						"Policies",
						"{{ntp-policy}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1f10ec49-ace0-4628-879a-3f93dee1db1b",
				"type": "text/javascript",
				"exec": [
					"function doHttpSig() {",
					"",
					"    var navigator = {}; //fake a navigator object for the lib",
					"    var window = {}; //fake a window object for the lib",
					"    eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import javascript jsrsasign",
					"    ",
					"    ",
					"    function computeHttpSignature(config, headerHash) {",
					"      var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"',",
					"          sig = template;",
					"    ",
					"      // compute sig here",
					"      var signingBase = '';",
					"      config.headers.forEach(function(h){",
					"        if (signingBase !== '') { signingBase += '\\n'; }",
					"        signingBase += h.toLowerCase() + \": \" + headerHash[h];",
					"      });",
					"    ",
					"    var kjursig = new KJUR.crypto.Signature({\"alg\": \"SHA256withRSA\"});",
					"    kjursig.init(config.secretkey);",
					"    kjursig.updateString(signingBase);",
					"    var hash = kjursig.sign();",
					"    ",
					"      var signatureOptions = {",
					"            keyId : config.keyId,",
					"            algorithm: config.algorithm,",
					"            headers: config.headers,",
					"            signature : hextob64(hash) ",
					"          };",
					"    ",
					"      // build sig string here",
					"      Object.keys(signatureOptions).forEach(function(key) {",
					"        var pattern = \"${\" + key + \"}\",",
					"            value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
					"        sig = sig.replace(pattern, value);",
					"      });",
					"    ",
					"      return sig;",
					"    }",
					"",
					"    let sdk = require('postman-collection'),",
					"      newRequest = new sdk.Request(pm.request.toJSON()),",
					"      resolvedRequest = newRequest.toObjectResolved(null, [pm.variables.toObject()], { ignoreOwnVariables: true });",
					"    ",
					"    var curDate = new Date().toGMTString();",
					"",
					"    var targetUrl = \"/\" + resolvedRequest.url.path.join(\"/\");",
					"",
					"    var host = resolvedRequest.url.host.join(\".\");",
					"",
					"    var method = request.method.toLowerCase();",
					"    var body = request.data;",
					"    ",
					"    if (method == \"get\" || method == \"delete\" ) {",
					"        body=\"\";",
					"    }",
					"",
					"    var sha256digest = CryptoJS.SHA256(body);",
					"    var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
					"    var computedDigest = 'SHA-256=' + base64sha256;",
					"    ",
					"    var headerHash = {",
					"          date : curDate,",
					"          digest : computedDigest,",
					"          host : host,",
					"          '(request-target)' : method + ' ' + targetUrl.toLowerCase()",
					"        };",
					"        ",
					"    var configHash = {",
					"          algorithm : 'rsa-sha256',",
					"          keyId : environment['api-key-id'],",
					"          secretkey : environment['secret-key'],",
					"          headers : [ '(request-target)', 'date', 'digest', 'host' ]",
					"        };",
					"    var sig = computeHttpSignature(configHash, headerHash);",
					"    ",
					"    postman.setEnvironmentVariable('httpsig', sig);",
					"    postman.setEnvironmentVariable('computed-digest', computedDigest);",
					"    postman.setEnvironmentVariable(\"current-date\", curDate);",
					"    postman.setEnvironmentVariable(\"target-url\", targetUrl);",
					"}",
					"",
					"",
					"if (globals['jsrsasign-js'] === undefined ) {",
					"    console.log(\"jsrasign library not already downloaded. Downloading now. \");",
					"    ",
					"    pm.sendRequest({",
					"        url: \"http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\",",
					"        method: \"GET\",",
					"        body: {}",
					"    }, function (err, res) {",
					"        postman.setGlobalVariable(\"jsrsasign-js\", res.text());",
					"    doHttpSig();",
					"    });",
					"    ",
					"} else {",
					"    doHttpSig();",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1247d526-0aaa-4519-bd82-b349c2866a5e",
				"type": "text/javascript",
				"exec": [
					"tests[\"Status code is 200\"] = responseCode.code === 200;",
					"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
					"",
					"if (responseBody.length > 0) {",
					"  var jsonData = JSON.parse(responseBody);",
					"  console.log(jsonData);",
					"",
					"  if (jsonData.Results) {",
					"    console.log(jsonData.Results.length);",
					"  }",
					"}"
				]
			}
		}
	]
}